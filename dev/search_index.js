var documenterSearchIndex = {"docs":
[{"location":"tutorials/demo/","page":"Demo","title":"Demo","text":"EditURL = \"https://github.com/s-ccs/ClusterDepth.jl/blob/main/docs/src/tutorials/demo.jl\"","category":"page"},{"location":"tutorials/demo/","page":"Demo","title":"Demo","text":"using ClusterDepth\nusing Random\nusing CairoMakie\n\n\nn_t =40 # timepoints\nn_sub = 50\nn_perm = 5000\n\nsnr = 0.5 # signal to nois\n\n# add a signal to the middle\nsignal = vcat(zeros(n_t÷4), sin.(range(0,π,length=n_t÷2)), zeros(n_t÷4))\n\n# same signal for all subs\nsignal = repeat(signal,1,n_sub)\n\n\n# add noise\ndata = randn(MersenneTwister(123),n_t,n_sub).+ snr .* signal\n\n# by default assumes τ=2.3 (~alpha=0.05), and one-sample ttest\n@time pvals = clusterdepth(data);\n\nf = Figure()\nax = f[1,1] = Axis(f)\n\n\nlines!(abs.(ClusterDepth.studentt(data)))\nh1 = scatter(f[1,2],pvals;axis=(;yscale=log10),label=\"troendle\")\n\npvals2 = clusterdepth(data;pval_type=:naive)\nh2 = scatter!(1.2:40.2,pvals2,color=\"red\",label=\"naive\")\nhlines!([0.05,0.01])\naxislegend()\nf","category":"page"},{"location":"tutorials/demo/","page":"Demo","title":"Demo","text":"","category":"page"},{"location":"tutorials/demo/","page":"Demo","title":"Demo","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ClusterDepth","category":"page"},{"location":"#ClusterDepth","page":"Home","title":"ClusterDepth","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ClusterDepth.","category":"page"},{"location":"#Comparison-to-permuco-R-implementation","page":"Home","title":"Comparison to permuco R implementation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The implementation to Permuco is similar, but ClusterDepth.jl is more barebone - that is, we dont offer many permutation schemes, focus on the ClusterDepth Algorithm, and don't provide the nice wrappers like clusterLM.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Timing wise, a simple test on 50 subjects, 100 repetitions, 5000 permutations shows the following results:","category":"page"},{"location":"","page":"Home","title":"Home","text":"timepoints ClusterDepth.jl permuco julia-speedup\n40 0.1s 2.9s 29x\n400 0.6s 22s 36x\n4000 7s 240s 34x","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ClusterDepth]","category":"page"},{"location":"#ClusterDepth.cluster-Tuple{Any, Any}","page":"Home","title":"ClusterDepth.cluster","text":"finds neighbouring clusters in the vector and returns start + length vectors\n\nif the first and last cluster start on the first/last sample, we dont know their real depth\n\n\n\n\n\n","category":"method"},{"location":"#ClusterDepth.clusterdepth-Tuple{AbstractMatrix, Vararg{Any}}","page":"Home","title":"ClusterDepth.clusterdepth","text":"calculate clusterdepth of given datamatrix. \n\nclusterdepth([rng],data::AbstractMatrix,τ=2.3, statFun=twosidedstudentt,nperm=5000;pvaltype=:troendle)\n\n- `data`: `statFun` will be applied on second dimension of data (typically this will be subjects)\n\nOptional \t- τ: Cluster-forming threshold  \t- statFun: default  studenttest, can be any custom function on a Matrix returning a Vector \t- nperm: number of permutations, default 5000 \t- pval_type: how to calculate pvalues within each cluster, default :troendle, see ?pvals\n\n\n\n\n\n","category":"method"},{"location":"#ClusterDepth.ix_sortUnique-Tuple{Any}","page":"Home","title":"ClusterDepth.ix_sortUnique","text":"in some sense: argsort(argunique(x)), returns the indices to get a sorted unique of x\n\n\n\n\n\n","category":"method"},{"location":"#ClusterDepth.multicol_minimum-Tuple{AbstractMatrix, AbstractVector}","page":"Home","title":"ClusterDepth.multicol_minimum","text":"calculates the minimum in `X` along `dims=2` in the columns specified by àrrayOfIndicearrays` which could be e.g. `[[1,2],[5,6],[3,4,7]]`\n\n\n\n\n\n","category":"method"},{"location":"#ClusterDepth.pvals-Tuple{Any, ClusterDepth.ClusterDepthMatrix, Vararg{Any}}","page":"Home","title":"ClusterDepth.pvals","text":"Calculate pvals from cluster-depth permutation matrices\n\n\n\n\n\n","category":"method"},{"location":"#ClusterDepth.pvals-Tuple{Any}","page":"Home","title":"ClusterDepth.pvals","text":"pvals(data;kwargs...) = pvals(data[2:end],data[1];kwargs...)\n\npvals(data::AbstractVector,stat::Real;type=:twosided)\n\ncalculates pvalues based on permutation results\n\nif called with stat, first entry is assumed to be the observation \n\n\n\n\n\n","category":"method"},{"location":"#ClusterDepth.sign_permute-Tuple{Any, AbstractMatrix, Any}","page":"Home","title":"ClusterDepth.sign_permute","text":"Permutation via random sign-flip Flips signs along the second dimension\n\n\n\n\n\n","category":"method"},{"location":"#ClusterDepth.troendle-Tuple{AbstractMatrix, AbstractVector}","page":"Home","title":"ClusterDepth.troendle","text":"function troendle(perm::AbstractMatrix,stat::AbstractVector;type=:twosided)\n\nMultiple Comparison Correction as in Troendle 1995\n\nperm with size  ntests x nperms\n\nstat with size ntests\n\ntype can be :twosided (default), :lesser, :greater\n\nHeavily inspired by the R implementation in permuco from Jaromil Frossard\n\nNote: While permuco is released under BSD, the author Jaromil Frossard gave us an MIT license for the troendle and the clusterdepth R-functions.\n\n\n\n\n\n","category":"method"}]
}
